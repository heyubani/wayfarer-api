/* eslint-disable no-unreachable */
/* eslint-disable consistent-return */
/* eslint-disable no-unused-vars */
/* eslint-disable max-len */
import jwt from 'jsonwebtoken';
import { checkUserExist } from '../services';
import config from '../config/env';
import { response, Success, Error } from '../utils/helpers/response.helpers';

const checkExistingUser = async (req, res, next) => {
  try {
    const { email } = req.body;
    const user = await checkUserExist(email);
    if (user.length) {
      const error = Error(400, 'user already exist');
      return response(res, error);
    }
    next();
  } catch (error) {
    console.log(error.message);
  }
};

const authenticateToken = (req, res, next) => {
  const token = req.body.token || req.query.token || req.headers['x-access-token'];
  // decode the token generated by user payload during signin or signup
  if (token) {
    jwt.verify(token, config.SECRET_KEY, (err, decoded) => {
      if (err) {
        const error = Error(401, 'Authentication failed. Token is either invalid or expired');
        return response(res, error);
      }
      req.decoded = decoded;
      next();
    });
  } else {
    const error = Error(403, 'wrong token. provide  a valid token');
    return response(res, error);
  }
};

const authenticateIsAdmin = (req, res, next) => {
  try {
    const userIsAdmin = req.decoded.is_admin;
    if (!userIsAdmin) {
      const error = Error(403, 'user is not an admin');
      return response(res, error);
    }
    next();
  } catch (error) {
    console.log(error.message);
  }
};

// eslint-disable-next-line import/prefer-default-export
export { checkExistingUser, authenticateToken, authenticateIsAdmin };
